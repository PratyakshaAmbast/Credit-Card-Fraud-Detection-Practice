library(ranger)
library(caret)
library(data.table)
library(readr)
library(readr)
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
summary(data)
#to check balanced or imbalanced data set
table(data$Class)
names(data)
summary(data$Amount)
sd(data$Amount)
IQR(data$Amount)
var(data$Amount)
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
set.seed(12)
library(caTools)
sample_data <- sample.split(data2$Class, SplitRatio = 0.80)
train_data <- subset(data2, sample_data == TRUE)
test_data <- subset(data2, sample_data == FALSE)
dim(train_data)
dim(test_data)
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
plot(Logistic_Model)
Logistic_Model1 <- glm(Class~., train_data,family=binomial())
summary(Logistic_Model1)
plot(Logistic_Model1)
library(pROC)
lr.predict <- predict(Logistic_Model1, test_data, probability = TRUE)
auc.gb <- roc(test_data$Class, lr.predict, plot = TRUE, col = "green")
library(rpart)
library(rpart.plot)
decision_model <- rpart(Class~., data, method="class")
predicted_val <- predict(decision_model,data, type="class")
probability <- predict(decision_model, data, type="prob")
predicted_val <- predict(decision_model,data, type="class")
probability <- predict(decision_model, data, type="prob")
rpart.plot(decision_model)
#doing small NN
library(neuralnet)
NN_model <- neuralnet::neuralnet(Class~., train_data, linear.output = FALSE)
library(ranger)
library(caret)
library(data.table)
library(readr
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
#statistical check
summary(data)
#to check balanced or imbalanced data set
table(data$Class)
names(data)
summary(data$Amount)
sd(data$Amount)
IQR(data$Amount)
var(data$Amount)
#manipulation
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
set.seed(12) #
library(caTools)
sample_data <- sample.split(data2$Class, SplitRatio = 0.80)
train_data <- subset(data2, sample_data == TRUE)
test_data <- subset(data2, sample_data == FALSE)
dim(train_data)
dim(test_data)
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
plot(Logistic_Model)
#import libraries
library(ranger)
library(caret)
library(data.table)
library(readr)
library(pROC)
lr.predict <- predict(Logistic_Model1, test_data, probability = TRUE)
auc.gb <- roc(test_data$Class, lr.predict, plot = TRUE, col = "green")
Logistic_Model1 <- glm(Class~., train_data,family=binomial())
summary(Logistic_Model1)
plot(Logistic_Model1)
lr.predict <- predict(Logistic_Model1, test_data, probability = TRUE)
auc.gb <- roc(test_data$Class, lr.predict, plot = TRUE, col = "green")
library(rpart)
library(rpart.plot)
decision_model <- rpart(Class~., data, method="class")
predicted_val <- predict(decision_model,data, type="class")
probability <- predict(decision_model, data, type="prob")
rpart.plot(decision_model)
library(ranger)
library(caret)
library(data.table)
library(readr)
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
#statistical check
summary(data)
#to check balanced or imbalanced data set
table(data$Class)
names(data)
#summary of amount
summary(data$Amount)
sd(data$Amount) #standard deviation
IQR(data$Amount) #interquartile range
var(data$Amount)
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
library(caTools)
sample_data <- sample.split(data2$Class, SplitRatio = 0.80)
train_data <- subset(data2, sample_data == TRUE)
test_data <- subset(data2, sample_data == FALSE)
View(test_data)
dim(train_data)
dim(test_data)
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
plot(Logistic_Model)
Logistic_Model1 <- glm(Class~., train_data,family=binomial())
summary(Logistic_Model1)
plot(Logistic_Model1)
library(pROC)
lr.predict <- predict(Logistic_Model1, test_data, probability = TRUE)
auc.gb <- roc(test_data$Class, lr.predict, plot = TRUE, col = "green")
library(rpart)
library(rpart.plot)
decision_model <- rpart(Class~., data, method="class")
predicted_val <- predict(decision_model,data, type="class")
probability <- predict(decision_model, data, type="prob")
rpart.plot(decision_model)
#doing small NN
library(neuralnet)
NN_model <- neuralnet::neuralnet(Class~., train_data, linear.output = FALSE)
plot(NN_model)
predNN <- compute(NN_model, test_data)
resultNN <- predNN$net.result
resultNN=ifelse(resultNN>0.6,1,0)
library(ranger)
library(caret)
library(data.table)
library(readr)
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
#statistical check
summary(data)
#to check balanced or imbalanced data set
table(data$Class)
names(data)
#summary of amount
summary(data$Amount)
sd(data$Amount) #standard deviation
IQR(data$Amount) #interquartile range
var(data$Amount)
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
set.seed(12) #
library(caTools)
sample_data <- sample.split(data2$Class, SplitRatio = 0.80)
train_data <- subset(data2, sample_data == TRUE)
test_data <- subset(data2, sample_data == FALSE)
dim(train_data)
dim(test_data)
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
plot(Logistic_Model)
library(readr)
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
#statistical check
summary(data)
table(data$Class)
names(data)
#summary of amount
summary(data$Amount)
sd(data$Amount) #standard deviation
IQR(data$Amount) #interquartile range
var(data$Amount)
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
dim(train_data)
dim(test_data)
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
summary(Logistic_Model)
plot(Logistic_Model)
Logistic_Model1 <- glm(Class~., train_data,family=binomial())
summary(Logistic_Model1)
plot(Logistic_Model1)
library(ranger)
library(caret)
library(data.table)
library(readr)
data <- read_csv("D:/creditcard.csv/creditcard.csv")
data.table(data) #exploration
#statistical check
summary(data)
#to check balanced or imbalanced data set
table(data$Class)
names(data)
summary(data$Amount)
sd(data$Amount) #standard deviation
IQR(data$Amount) #interquartile range
var(data$Amount) #variance It is the measure of how much value is away from the mean value.
#manipulation
data$Amount <- scale(data$Amount)    #normalization
data2<-data[,-c(1)]     #removing time from data
head(data2)
set.seed(12) #
library(caTools)
sample_data <- sample.split(data2$Class, SplitRatio = 0.80)
train_data <- subset(data2, sample_data == TRUE)
test_data <- subset(data2, sample_data == FALSE)
dim(train_data)
dim(test_data)
#fit logistic on data
Logistic_Model <- glm(Class~., test_data,family=binomial())
summary(Logistic_Model)
plot(Logistic_Model)
git remote add origin https://github.com/prats2000/Credit_Card_Fraud_Detection.git
git branch -M main
git push -u origin main
